/*******************************************************************************************
* Jacobian for the model 001 calculated with Wolfram Language 
* and adapted for its use with the GSL library.
*******************************************************************************************/

int jacobian(double t, const double y[], double *dfdy, double dfdt[], void *params)
{
	(void)(y);
	(void)(t);

	double n = *(double *)params;
	double Z = *((double *)params + 1);

	gsl_matrix_view dfdy_mat = gsl_matrix_view_array(dfdy, 5, 5);
	gsl_matrix * m = &dfdy_mat.matrix;

	gsl_matrix_set(m, 0, 0, -8158.*n);
	gsl_matrix_set(m, 0, 1, 0);
	gsl_matrix_set(m, 0, 2, 318.3333333);
	gsl_matrix_set(m, 0, 3, 0);
	gsl_matrix_set(m, 0, 4, 0);

	gsl_matrix_set(m, 1, 0, 8158.*n);
	gsl_matrix_set(m, 1, 1, -190.*n*(0.00002 + Z));
	gsl_matrix_set(m, 1, 2, -191.3333333);
	gsl_matrix_set(m, 1, 3, 0);
	gsl_matrix_set(m, 1, 4, 0);

	gsl_matrix_set(m, 2, 0, 0);
	gsl_matrix_set(m, 2, 1, 190.*n*(0.00002 + Z));
	gsl_matrix_set(m, 2, 2, -127.3333333);
	gsl_matrix_set(m, 2, 3, 0);
	gsl_matrix_set(m, 2, 4, 0);

	gsl_matrix_set(m, 3, 0, 0);
	gsl_matrix_set(m, 3, 1, 0);
	gsl_matrix_set(m, 3, 2, 0.3333333333*(0.034 - 1.*Z));
	gsl_matrix_set(m, 3, 3, 0);
	gsl_matrix_set(m, 3, 4, 0);

	gsl_matrix_set(m, 4, 0, 0);
	gsl_matrix_set(m, 4, 1, 0);
	gsl_matrix_set(m, 4, 2, 0.3333333333);
	gsl_matrix_set(m, 4, 3, 0);
	gsl_matrix_set(m, 4, 4, 0);

	dfdt[0] = 0;
	dfdt[1] = 0;
	dfdt[2] = 0;
	dfdt[3] = 0;
	dfdt[4] = 0;

	return GSL_SUCCESS;
};