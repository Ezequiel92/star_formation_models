/*******************************************************************************************
* Jacobian for the model 019 calculated with Wolfram Language 
* and adapted for its use with the GSL library.
*******************************************************************************************/

int jacobian(double t, const double y[], double *dfdy, double dfdt[], void *params)
{
	(void)(t);

	struct Parameters *parameters = (struct Parameters *)params;

    double rho0 = parameters->rho0;
    double g0 = parameters->g0;
    gsl_spline *interp_ion = parameters->interp_ion;
    gsl_interp_accel *acc_ion = parameters->acc_ion;
    gsl_spline *interp_diss = parameters->interp_diss;
    gsl_interp_accel *acc_diss = parameters->acc_diss;

    double eta_ion = gsl_spline_eval(interp_ion, y[3], acc_ion);
    double eta_diss = gsl_spline_eval(interp_diss, y[3], acc_diss);

	gsl_matrix_view dfdy_mat = gsl_matrix_view_array(dfdy, 5, 5);
	gsl_matrix * m = &dfdy_mat.matrix;

	gsl_matrix_set(m, 0, 0, -6.61e5*rho0*y[0] + (0.6175*(0.18 + etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 0, 1, (0.6175*(0.18 + etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 0, 2, (0.6175*(0.18 + etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + (1.235*(0.18 + etaIon)*sqrt(rho0*(y[1] + y[0] + y[2])))/g0);
	gsl_matrix_set(m, 0, 3, 0);
	gsl_matrix_set(m, 0, 4, 0);

	gsl_matrix_set(m, 1, 0, 6.61e5*rho0*y[0] + (0.6175*(etaDiss - 1.*etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) - 1.143e4*rho0*y[1]*(0.0000134 + y[3]));
	gsl_matrix_set(m, 1, 1, (0.6175*(etaDiss - 1.*etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) - 1.143e4*rho0*y[1]*(0.0000134 + y[3]) - 1.143e4*rho0*(y[1] + y[0] + y[2])*(0.0000134 + y[3]));
	gsl_matrix_set(m, 1, 2, (0.6175*(etaDiss - 1.*etaIon)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + (1.235*(etaDiss - 1.*etaIon)*sqrt(rho0*(y[1] + y[0] + y[2])))/g0 - 1.143e4*rho0*y[1]*(0.0000134 + y[3]));
	gsl_matrix_set(m, 1, 3, -1.143e4*rho0*y[1]*(y[1] + y[0] + y[2]));
	gsl_matrix_set(m, 1, 4, 0);

	gsl_matrix_set(m, 2, 0, (-0.6175*(1. + etaDiss)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + 1.143e4*rho0*y[1]*(0.0000134 + y[3]));
	gsl_matrix_set(m, 2, 1, (-0.6175*(1. + etaDiss)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + 1.143e4*rho0*y[1]*(0.0000134 + y[3]) + 1.143e4*rho0*(y[1] + y[0] + y[2])*(0.0000134 + y[3]));
	gsl_matrix_set(m, 2, 2, (-0.6175*(1. + etaDiss)*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) - (1.235*(1. + etaDiss)*sqrt(rho0*(y[1] + y[0] + y[2])))/g0 + 1.143e4*rho0*y[1]*(0.0000134 + y[3]));
	gsl_matrix_set(m, 2, 3, 1.143e4*rho0*y[1]*(y[1] + y[0] + y[2]));
	gsl_matrix_set(m, 2, 4, 0);

	gsl_matrix_set(m, 3, 0, (0.6175*rho0*y[2]*(0.0162 - 1.*y[3]))/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 3, 1, (0.6175*rho0*y[2]*(0.0162 - 1.*y[3]))/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 3, 2, (0.6175*rho0*y[2]*(0.0162 - 1.*y[3]))/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + (1.235*sqrt(rho0*(y[1] + y[0] + y[2]))*(0.0162 - 1.*y[3]))/g0);
	gsl_matrix_set(m, 3, 3, (-1.235*y[2]*sqrt(rho0*(y[1] + y[0] + y[2])))/g0);
	gsl_matrix_set(m, 3, 4, 0);

	gsl_matrix_set(m, 4, 0, (0.5064*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 4, 1, (0.5064*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))));
	gsl_matrix_set(m, 4, 2, (0.5064*rho0*y[2])/(g0*sqrt(rho0*(y[1] + y[0] + y[2]))) + (1.013*sqrt(rho0*(y[1] + y[0] + y[2])))/g0);
	gsl_matrix_set(m, 4, 3, 0);
	gsl_matrix_set(m, 4, 4, 0);

	dfdt[0] = 0;
	dfdt[1] = 0;
	dfdt[2] = 0;
	dfdt[3] = 0;
	dfdt[4] = 0;

	return GSL_SUCCESS;
};