/*******************************************************************************************
* Jacobian for the model 005 calculated with Wolfram Language
* and adapted for its use with the Boost odeint library.
*******************************************************************************************/

struct jacobian
{
    template <class State, class Matrix>
    void operator()(const State &y, Matrix &J, const double &t, State &dfdt)
    {
        (void)(t);

		J(0,0) = -13.509648*pow(g,2)*(1. + y[3]);
		J(0,1) = 0;
		J(0,2) = 367.4192308;
		J(0,3) = -13.509648*pow(g,2)*y[0];
		J(0,4) = 0;

		J(1,0) = 13.509648*pow(g,2)*(1. + y[3]);
		J(1,1) = -2.790447761*pow(g,2)*(0.0000134 + Z)*(1. + y[3]);
		J(1,2) = -220.9076923;
		J(1,3) = -2.790447761*pow(g,2)*(0.0000134 + Z)*y[1] + 13.509648*pow(g,2)*y[0];
		J(1,4) = 0;

		J(2,0) = 0;
		J(2,1) = 2.790447761*pow(g,2)*(0.0000134 + Z)*(1. + y[3]);
		J(2,2) = -146.8961538;
		J(2,3) = 2.790447761*pow(g,2)*(0.0000134 + Z)*y[1];
		J(2,4) = 0;

		J(3,0) = 0;
		J(3,1) = 0;
		J(3,2) = 0.3846153846*(0.0162 - 1.*Z);
		J(3,3) = 0;
		J(3,4) = 0;

		J(4,0) = 0;
		J(4,1) = 0;
		J(4,2) = 0.3846153846;
		J(4,3) = 0;
		J(4,4) = 0;

		dfdt[0] = 0;
		dfdt[1] = 0;
		dfdt[2] = 0;
		dfdt[3] = 0;
		dfdt[4] = 0;
    }
};