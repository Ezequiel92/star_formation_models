/*******************************************************************************************
* Jacobian for the model 018 calculated with Wolfram Language 
* and adapted for its use with the GSL library.
*******************************************************************************************/

int jacobian(double t, const double y[], double *dfdy, double dfdt[], void *params)
{
	(void)(t);

	double tot0 = *(double *)params;

	gsl_matrix_view dfdy_mat = gsl_matrix_view_array(dfdy, 5, 5);
	gsl_matrix * m = &dfdy_mat.matrix;

	gsl_matrix_set(m, 0, 0, -660066.0066*tot0*y[0] + 0.3846153846*y[2]*(y[0]/pow(y[1] + y[0] + y[2] + y[3],2) - 1./(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 0, 1, (0.3846153846*y[0]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 0, 2, (0.3846153846*y[0]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2) + 0.3846153846*(955.4538 - (1.*y[0])/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 0, 3, (0.3846153846*y[0]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 0, 4, 0);

	gsl_matrix_set(m, 1, 0, 660066.0066*tot0*y[0] + (0.3846153846*y[1]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2) + (11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 1, 1, (11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 0.3846153846*y[2]*(y[1]/pow(y[1] + y[0] + y[2] + y[3],2) - 1./(y[1] + y[0] + y[2] + y[3])) - 11441.6476*tot0*y[1]*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])) - 11441.6476*tot0*(y[1] + y[2])*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 1, 2, (0.3846153846*y[1]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2) + (11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 0.3846153846*(-574.36 - (1.*y[1])/(y[1] + y[0] + y[2] + y[3])) - 11441.6476*tot0*y[1]*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 1, 3, (0.3846153846*y[1]*y[2])/pow(y[1] + y[0] + y[2] + y[3],2) - 11441.6476*tot0*y[1]*(y[1] + y[2])*((-1.*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 1/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 1, 4, 0);

	gsl_matrix_set(m, 2, 0, (0.3846153846*pow(y[2],2))/pow(y[1] + y[0] + y[2] + y[3],2) - (11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 2, 1, (0.3846153846*pow(y[2],2))/pow(y[1] + y[0] + y[2] + y[3],2) - (11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 11441.6476*tot0*y[1]*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])) + 11441.6476*tot0*(y[1] + y[2])*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 2, 2, (-11441.6476*tot0*y[1]*(y[1] + y[2])*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) - 0.3846153846*y[2]*((-1.*y[2])/pow(y[1] + y[0] + y[2] + y[3],2) + 1/(y[1] + y[0] + y[2] + y[3])) - 0.3846153846*(380.93 + y[2]/(y[1] + y[0] + y[2] + y[3])) + 11441.6476*tot0*y[1]*(0.0000134 + y[3]/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 2, 3, (0.3846153846*pow(y[2],2))/pow(y[1] + y[0] + y[2] + y[3],2) + 11441.6476*tot0*y[1]*(y[1] + y[2])*((-1.*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 1/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 2, 4, 0);

	gsl_matrix_set(m, 3, 0, (0.3846153846*y[2]*y[3])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 3, 1, (0.3846153846*y[2]*y[3])/pow(y[1] + y[0] + y[2] + y[3],2));
	gsl_matrix_set(m, 3, 2, (0.3846153846*y[2]*y[3])/pow(y[1] + y[0] + y[2] + y[3],2) + 0.3846153846*(0.0162 - (1.*y[3])/(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 3, 3, 0.3846153846*y[2]*(y[3]/pow(y[1] + y[0] + y[2] + y[3],2) - 1./(y[1] + y[0] + y[2] + y[3])));
	gsl_matrix_set(m, 3, 4, 0);

	gsl_matrix_set(m, 4, 0, 0);
	gsl_matrix_set(m, 4, 1, 0);
	gsl_matrix_set(m, 4, 2, 0.3153846154);
	gsl_matrix_set(m, 4, 3, 0);
	gsl_matrix_set(m, 4, 4, 0);

	dfdt[0] = 0;
	dfdt[1] = 0;
	dfdt[2] = 0;
	dfdt[3] = 0;
	dfdt[4] = 0;

	return GSL_SUCCESS;
};