/***************************************************************************************
* Jacobian for the model 002 calculated with Wolfram Language
* and adapted for its use with the Boost odeint library.
****************************************************************************************/

struct jacobian
{
    template <class State, class Matrix>
    void operator()(const State &y, Matrix &J, const double &t, State &dfdt)
    {
        (void)(y);
        (void)(t);

		J(0,0) = -8158.*n;
		J(0,1) = 0;
		J(0,2) = 367.41923076923075;
		J(0,3) = 0;
		J(0,4) = 0;

		J(1,0) = 8158.*n;
		J(1,1) = -283.5820896*n*(0.0000134 + Z);
		J(1,2) = -220.90769230769226;
		J(1,3) = 0;
		J(1,4) = 0;

		J(2,0) = 0;
		J(2,1) = 283.5820896*n*(0.0000134 + Z);
		J(2,2) = -146.89615384615382;
		J(2,3) = 0;
		J(2,4) = 0;

		J(3,0) = 0;
		J(3,1) = 0;
		J(3,2) = 0.3846153846153846*(0.0162 - 1.*Z);
		J(3,3) = 0;
		J(3,4) = 0;

		J(4,0) = 0;
		J(4,1) = 0;
		J(4,2) = 0.3846153846153846;
		J(4,3) = 0;
		J(4,4) = 0;

		dfdt[0] = 0;
		dfdt[1] = 0;
		dfdt[2] = 0;
		dfdt[3] = 0;
		dfdt[4] = 0;
    }
};