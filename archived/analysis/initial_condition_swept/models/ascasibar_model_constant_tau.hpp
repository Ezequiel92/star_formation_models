/***************************************************************************************
* Numerical solution for the Ascasibar et al. model (constant τS).
****************************************************************************************/

const char name[] = "ascasibar_model_constant_tau";

vector_type Y0{5}; // Initial condition vector.

/* Constants. */

const Double tau_S = 2.6;		  // [Gyr]
const Double C1 = 0.074;		  // [Mₒ^2 pc^(-4) Gyr]
const Double C2 = 360e-3;		  // [Mₒ^2 pc^(-4) Gyr]
const Double R = 0.18;
const Double eta_ion = 955.29;
const Double eta_diss = 380.93;
const Double Zsun = 0.0134;
const Double Zsn = 0.09;
const Double Zeff = Zsun * 1e-3;

/* Star formation rate function */

Double SFR(Double m)
{
	return m / tau_S; // [Mₒ pc^(-2) Gyr^(-1)]
}

/* Witness function. */

struct file_observer
{
	FILE *fp;

	file_observer(FILE *file) : fp{file} {}

	template <class State>
	void operator()(const State &y, Double t) const
	{	// t	i(t)	a(t)	m(t)	z(t)	SFR(t)	s(t)	g(t) = i + a + m
        fprintf(fp, "%.15g \t %.15g \t %.15g \t %.15g \t %.15g \t %.15g \t %.15g \t %.15g\n", 
				t, y[0], y[1], y[2], y[4], SFR(y[2]), y[3], y[0] + y[1] + y[2]);
	}
};

/* Equations. */

struct rhs
{
	template <class State>
	void operator()(const State &y, State &dydt, Double t)
	{
		/*
		*	ionized gas:       i(t) -> y[0]
		*	atomic gas:        a(t) -> y[1]
		*	molecular gas:     m(t) -> y[2]
		*	star mass:         s(t) -> y[3]
		*	metals:            z(t) -> y[4]

		*	Units -> Each equation has Mₒ pc^(-2) Gyr^(-1) [Solar_mass * parsec^-2 * years^-9)] as units in the LHS and RHS.
		*/

		(void)(t);

		Double g = y[0] + y[1] + y[2];
		Double tot = g + y[3];
		Double psi = y[2] / tau_S;
		Double Z = y[4] / g;
		Double tau_R = C1 / (g * tot);
		Double tau_C = C2 / (g * tot * (Z + Zeff));
		Double recombination = y[0] / tau_R;
		Double cloud_formation = y[1] / tau_C;

		dydt[0] = -recombination + (eta_ion + R) * psi;
		dydt[1] = -cloud_formation + recombination + (eta_diss - eta_ion) * psi;
		dydt[2] = cloud_formation - (eta_diss + 1) * psi;
		dydt[3] = (1 - R) * psi;
		dydt[4] = (Zsn * R - Z) * psi;
	}
};

/* Jacobian. */

struct jacobi
{
	template <class State, class Matrix>
	void operator()(const State &y, Matrix &J, const Double &t, State &dfdt)
	{
		(void)(t);

		J(0,0) = -13.5135135135135*y[0]*(y[1] + y[0] + y[2]) - 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]) - 13.5135135135135*(y[1] + y[0] + y[2])*(y[1] + y[0] + y[2] + y[3]);
		J(0,1) = -13.5135135135135*y[0]*(y[1] + y[0] + y[2]) - 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]);
		J(0,2) = 367.48846153846154 - 13.5135135135135*y[0]*(y[1] + y[0] + y[2]) - 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]);
		J(0,3) = -13.5135135135135*y[0]*(y[1] + y[0] + y[2]);
		J(0,4) = 0;

		J(1,0) = 13.5135135135135*y[0]*(y[1] + y[0] + y[2]) + 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]) + 13.5135135135135*(y[1] + y[0] + y[2])*(y[1] + y[0] + y[2] + y[3]) + (2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(1,1) = 13.5135135135135*y[0]*(y[1] + y[0] + y[2]) + 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]) + (2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) - 2.77777777777778*(y[1] + y[0] + y[2])*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(1,2) = -220.9076923076923 + 13.5135135135135*y[0]*(y[1] + y[0] + y[2]) + 13.5135135135135*y[0]*(y[1] + y[0] + y[2] + y[3]) + (2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(1,3) = 13.5135135135135*y[0]*(y[1] + y[0] + y[2]) - 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(1,4) = -2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3]);

		J(2,0) = (-2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(2,1) = (-2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) + 2.77777777777778*(y[1] + y[0] + y[2])*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(2,2) = -146.89615384615385 - (2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*y[4])/(y[1] + y[0] + y[2]) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2])) + 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(2,3) = 2.77777777777778*y[1]*(y[1] + y[0] + y[2])*(0.0000134 + y[4]/(y[1] + y[0] + y[2]));
		J(2,4) = 2.77777777777778*y[1]*(y[1] + y[0] + y[2] + y[3]);

		J(3,0) = 0;
		J(3,1) = 0;
		J(3,2) = 0.315384615384615;
		J(3,3) = 0;
		J(3,4) = 0;

		J(4,0) = (0.384615384615385*y[2]*y[4])/pow(y[1] + y[0] + y[2],2);
		J(4,1) = (0.384615384615385*y[2]*y[4])/pow(y[1] + y[0] + y[2],2);
		J(4,2) = (0.384615384615385*y[2]*y[4])/pow(y[1] + y[0] + y[2],2) + 0.384615384615385*(0.0162 - (1.*y[4])/(y[1] + y[0] + y[2]));
		J(4,3) = 0;
		J(4,4) = (-0.384615384615385*y[2])/(y[1] + y[0] + y[2]);

		dfdt[0] = 0;
		dfdt[1] = 0;
		dfdt[2] = 0;
		dfdt[3] = 0;
		dfdt[4] = 0;
	}
};