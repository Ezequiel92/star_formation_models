/********************************************************************************************
* Numerical solution for the full model (Schmidt-Kennicutt law without infall and outflow).
*********************************************************************************************/

const char name[] = "Full model (Kennicutt - No IO)";

/* Constants. */

const Double A = 2.5e-4; // [Mₒ pc^(-2) Gyr^(-1)]
const Double N = 1.4;
const Double Twarm = 10000.0;	  // [K]
const Double Tcold = 100.0;		  // [K]
const Double T1 = 50000.0;		  // [K]
const Double Sigma_ion = 8e-4;	  // [Mₒ pc^(-2)]
const Double Sigma_diss = 1.5e-4; // [Mₒ pc^(-2)]
const Double C2 = 0.074;		  // [Mₒ^2 pc^(-4) Gyr]
const Double C4 = 798e-3;		  // [Mₒ^2 pc^(-4) Gyr]
const Double R = 0.17;
const Double alpha = 0.3;
const Double eta_i_lim = 955.29;
const Double eta_d_lim = 380.93;
const Double Zsun = 0.0134;
const Double Zsn = 0.2;
const Double Zeff = Zsun * 1e-3;

/* Initial condition for test run and time measurement. */

const Double g0 = 1.0;
const Double i0 = g0 * 0.6;	 // [Mₒ pc^(-2)]
const Double a0 = g0 * 0.2;	 // [Mₒ pc^(-2)]
const Double m0 = g0 * 0.2;	 // [Mₒ pc^(-2)]
const Double s0 = g0 * 0.0;	 // [Mₒ pc^(-2)]
const Double z0 = g0 * 1e-4; // [Mₒ pc^(-2)]
vector_type Y0{5};

/* Parameters. */

const Double Tstart = 0.0; // [Gyr]
const Double Tend = 10.0;   // [Gyr]

/* File initialization function. */

FILE *file_ini(const char *name)
{
	FILE *file;
	file = fopen(name, "a");
	fprintf(file, "t \t i(t) \t a(t) \t m(t) \t s(t) \t z(t) \t SFR(t) \n");
	return file;
}

/* Star formation rate function */

Double SFR(Double a, Double m)
{
	return (A * pow(m + a, N)); // [Mₒ pc^(-2) Gyr^(-1)]
}

/* Witness function. */

struct file_observer
{
	FILE *fp;

	file_observer(FILE *file) : fp{file} {}

	template <class State>
	void operator()(const State &y, Double t) const
	{
		fprintf(fp, "%.15g \t %.15g \t %.15g \t %.15g \t %.15g \t %.15g \t %.15g \n", t, y[0], y[1], y[2], y[3], y[4], SFR(y[1], y[2]));
	}
};

/* Equations. */

struct rhs
{
	template <class State>
	void operator()(const State &y, State &dydt, Double t)
	{
		/*
		*	ionized gas:       i(t) -> y[0]
		*	atomic gas:        a(t) -> y[1]
		*	molecular gas:     m(t) -> y[2]
		*	star mass:         s(t) -> y[3]
		*	metals:            z(t) -> y[4]

		*	Units -> Each equation has Mₒ pc^(-2) Gyr^(-1) [Solar_mass * parsec^-2 * years^-9] as units in the LHS and RHS.
		*/

		(void)(t);

		Double star_elem = y[2] + alpha * y[1];
		Double g = y[0] + y[1] + y[2];
		Double tot = g + y[3];
		Double psi = A * pow(y[1] + y[2], N);
		Double eta_ion = eta_i_lim * (1 - exp(-y[1] / Sigma_ion));
		Double eta_diss = eta_d_lim * (1 - exp(-y[2] / Sigma_diss));
		Double Z = y[4] / g;
		Double tau_R = C2 * (1 + T1 * psi / (Twarm * g)) / (g * tot);
		Double tau_C = C4 * (1 + T1 * psi / (Tcold * g)) * Zsun / (g * tot * (Z + Zeff));
		Double recombination = y[0] / tau_R;
		Double cloud_formation = y[1] / tau_C;

		dydt[0] = -recombination + (eta_ion + R) * psi;
		dydt[1] = -cloud_formation + recombination + (eta_diss - eta_ion - alpha * y[1] / star_elem) * psi;
		dydt[2] = cloud_formation - (eta_diss + y[2] / star_elem) * psi;
		dydt[3] = (1 - R) * psi;
		dydt[4] = (Zsn * R - Z) * psi;
	}
};

/* Constant Jacobian. */

struct jacobi_const
{
	template <class State, class Matrix>
	void operator()(const State &y, Matrix &J, const Double &t, State &dfdt)
	{
		(void)(y);
		(void)(t);

		J(0, 0) = -29.722237894882;
		J(0, 1) = -15.9717825600831;
		J(0, 2) = -15.9717825600831;
		J(0, 3) = -8.10529903499394;
		J(0, 4) = 0;

		J(1, 0) = 29.7198770690587;
		J(1, 1) = 16.0517500347488;
		J(1, 2) = 16.0621227241362;
		J(1, 3) = 8.10324910580912;
		J(1, 4) = -18.076976938439;

		J(2, 0) = 0.00236082582331322;
		J(2, 1) = -0.0801688332426604;
		J(2, 2) = -0.0905415226300373;
		J(2, 3) = 0.00204992918481898;
		J(2, 4) = 18.076976938439;

		J(3, 0) = 0;
		J(3, 1) = 0.00020135857693657;
		J(3, 2) = 0.00020135857693657;
		J(3, 3) = 0;
		J(3, 4) = 0;

		J(4, 0) = 6.93144843155146e-9;
		J(4, 1) = 8.23109501246736e-6;
		J(4, 2) = 8.23109501246736e-6;
		J(4, 3) = 0;
		J(4, 4) = -0.0000693144843155146;

		dfdt[0] = 0;
		dfdt[1] = 0;
		dfdt[2] = 0;
		dfdt[3] = 0;
		dfdt[4] = 0;
	}
};

/* Variable Jacobian. */

struct jacobi_var
{
	template <class State, class Matrix>
	void operator()(const State &y, Matrix &J, const Double &t, State &dfdt)
	{
		(void)(t);

		J(0, 0) = (-13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (0.0168918918918919 * y[0] * pow(y[1] + y[2], 1.4) * (y[1] + y[0] + y[2] + y[3])) / ((y[1] + y[0] + y[2]) * pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2)) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (13.5135135135135 * (y[1] + y[0] + y[2]) * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(0, 1) = 0.00035 * (0.17 + 955.29 * (1. - 1. / exp(1250. * y[1]))) * pow(y[1] + y[2], 0.4) + (298.528125 * pow(y[1] + y[2], 1.4)) / exp(1250. * y[1]) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2]) * ((-0.00125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.00175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3])) / pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(0, 2) = 0.00035 * (0.17 + 955.29 * (1. - 1. / exp(1250. * y[1]))) * pow(y[1] + y[2], 0.4) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2]) * ((-0.00125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.00175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3])) / pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(0, 3) = (-13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(0, 4) = 0;

		J(1, 0) = (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (0.0168918918918919 * y[0] * pow(y[1] + y[2], 1.4) * (y[1] + y[0] + y[2] + y[3])) / ((y[1] + y[0] + y[2]) * pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2)) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (13.5135135135135 * (y[1] + y[0] + y[2]) * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (11.6896719410466 * y[1] * pow(y[1] + y[2], 1.4) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / ((y[1] + y[0] + y[2]) * pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2)) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(1, 1) = 0.00025 * pow(y[1] + y[2], 1.4) * (-1.1941125e6 / exp(1250. * y[1]) + (0.09 * y[1]) / pow(0.3 * y[1] + y[2], 2) - 0.3 / (0.3 * y[1] + y[2])) + 0.00035 * pow(y[1] + y[2], 0.4) * (-955.29 * (1. - 1. / exp(1250. * y[1])) + 380.93 * (1. - 1. / exp(6666.66666666666667 * y[2])) - (0.3 * y[1]) / (0.3 * y[1] + y[2])) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2]) * ((-0.00125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.00175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3])) / pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * ((-0.125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (93.5173755283732 * (y[1] + y[0] + y[2]) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(1, 2) = 0.00025 * pow(y[1] + y[2], 1.4) * (2.53953333333333e6 / exp(6666.66666666666667 * y[2]) + (0.3 * y[1]) / pow(0.3 * y[1] + y[2], 2)) + 0.00035 * pow(y[1] + y[2], 0.4) * (-955.29 * (1. - 1. / exp(1250. * y[1])) + 380.93 * (1. - 1. / exp(6666.66666666666667 * y[2])) - (0.3 * y[1]) / (0.3 * y[1] + y[2])) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (13.5135135135135 * y[0] * (y[1] + y[0] + y[2]) * ((-0.00125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.00175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3])) / pow(1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) + (13.5135135135135 * y[0] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * ((-0.125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(1, 3) = (13.5135135135135 * y[0] * (y[1] + y[0] + y[2])) / (1. + (0.00125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(1, 4) = (-93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));

		J(2, 0) = (-93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (11.6896719410466 * y[1] * pow(y[1] + y[2], 1.4) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / ((y[1] + y[0] + y[2]) * pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2)) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(2, 1) = (0.000075 * y[2] * pow(y[1] + y[2], 1.4)) / pow(0.3 * y[1] + y[2], 2) - 0.00035 * pow(y[1] + y[2], 0.4) * (380.93 * (1. - 1. / exp(6666.66666666666667 * y[2])) + y[2] / (0.3 * y[1] + y[2])) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * ((-0.125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) + (93.5173755283732 * (y[1] + y[0] + y[2]) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(2, 2) = -0.00025 * pow(y[1] + y[2], 1.4) * (2.53953333333333e6 / exp(6666.66666666666667 * y[2]) - (1. * y[2]) / pow(0.3 * y[1] + y[2], 2) + 1 / (0.3 * y[1] + y[2])) - 0.00035 * pow(y[1] + y[2], 0.4) * (380.93 * (1. - 1. / exp(6666.66666666666667 * y[2])) + y[2] / (0.3 * y[1] + y[2])) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * y[4]) / ((y[1] + y[0] + y[2]) * (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]))) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2])) - (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * ((-0.125 * pow(y[1] + y[2], 1.4)) / pow(y[1] + y[0] + y[2], 2) + (0.175 * pow(y[1] + y[2], 0.4)) / (y[1] + y[0] + y[2])) * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / pow(1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]), 2) + (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(2, 3) = (93.5173755283732 * y[1] * (y[1] + y[0] + y[2]) * (0.0000134 + y[4] / (y[1] + y[0] + y[2]))) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));
		J(2, 4) = (93.5173755283732 * y[1] * (y[1] + y[0] + y[2] + y[3])) / (1. + (0.125 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]));

		J(3, 0) = 0;
		J(3, 1) = 0.0002905 * pow(y[1] + y[2], 0.4);
		J(3, 2) = 0.0002905 * pow(y[1] + y[2], 0.4);
		J(3, 3) = 0;
		J(3, 4) = 0;

		J(4, 0) = (0.00025 * pow(y[1] + y[2], 1.4) * y[4]) / pow(y[1] + y[0] + y[2], 2);
		J(4, 1) = (0.00025 * pow(y[1] + y[2], 1.4) * y[4]) / pow(y[1] + y[0] + y[2], 2) + 0.00035 * pow(y[1] + y[2], 0.4) * (0.034 - (1. * y[4]) / (y[1] + y[0] + y[2]));
		J(4, 2) = (0.00025 * pow(y[1] + y[2], 1.4) * y[4]) / pow(y[1] + y[0] + y[2], 2) + 0.00035 * pow(y[1] + y[2], 0.4) * (0.034 - (1. * y[4]) / (y[1] + y[0] + y[2]));
		J(4, 3) = 0;
		J(4, 4) = (-0.00025 * pow(y[1] + y[2], 1.4)) / (y[1] + y[0] + y[2]);

		dfdt[0] = 0;
		dfdt[1] = 0;
		dfdt[2] = 0;
		dfdt[3] = 0;
		dfdt[4] = 0;
	}
};